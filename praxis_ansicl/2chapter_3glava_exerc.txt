2 часть по упражнениям 3 главы
_____
EX.2.
______

Понятие принадлежности формализуем в функции
in-predicate

эта функция проверяет есть ли атом в списке, который мы задали
если есть, то функция возвращает истину (T)
если атома, который мы задали нет в списке, то взвращает ложь (NIL)
два аргумента: 
1 - атом (элемент)
2 - одноуровневый список, который представляет множество

CL-USER> (defun in-predicate (a l)
           (cond
             ((null l)
              nil)                  ; элемент не может принадлежать пустому множеству (l-одноуровневый список)
             ((eq a (car l))
              t)                    ; элемент, в данном случае a - принадлежит множеству, если в нем содержится
             (t
              (in-predicate a (cdr l)))))  ; продолжаем проверку

IN-PREDICATE                                                                                                                          
CL-USER> (in-predicate 'a '(a b c))
T                                                                                                                                     
CL-USER> (in-predicate 'a '(b a c))
T                                                                                                                                     
CL-USER> (in-predicate 'c '(b a c))
T                                                                                                                                     
CL-USER> (in-predicate 'c '(b a f g h d c))
T                                                                                                                                     
CL-USER> (in-predicate 'c '(b a f g h d))
NIL 






Функция объединения 
В математике (алгебре) 
объединение множеств а и в - называется множество

множество из элементов А, В, С будет представленно в виде списка (А В С)

многоуровневые списки представляют множество множеств

рассмотрим одноуровневые списки
т.е. множества состоящие из элементов

объединение множеств:

об объединении может свидетельствовать функция union
+ имеются аргументы a и b, которые представляют два объединяемых множества

все сводится к рекурсивной обработки одного из арументов:
- если а пусто, то вернуть b
- если пусто b, то вернуть а
- если 
(car a)
принадлежит множеству b,
то результат:

(cons (car a)
	(union (cdr a)
		b)

в противном случае результат:

(union (cdr a) 
	b)

так как мы рассматриваем только одноуровневые списки, 
то (car a) всегда будет атомом (элементом)


Доказательство того, что первый аргумент должен быть атомом

CL-USER> (defun in-predicate (a l)                                                                                                    
           (cond                                                                                                                      
             ((null l)                                                                                                                
              nil)                  ; элемент не может принадлежать пустому множеству (l-одноуровневый список)                        
             ((eq a (car l))                                                                                                          
              t)                    ; в данном случае 'a - принадлежит множеству, если в списке (l) содержится                       
             (t                                                                                                                       
              (in-predicate a (cdr l)))))  ; продолжаем проверку
STYLE-WARNING: redefining COMMON-LISP-USER::IN-PREDICATE in DEFUN                                                                     
IN-PREDICATE                                                                                                                          
CL-USER> (in-predicate '(a b c) '(d c a))
NIL                                                                                                                                   
CL-USER> (in-predicate 'a '(d c a))
T                                                                                                                                     
CL-USER> (in-predicate '(a) '(d c a))
NIL 


рассмотрим работу функции union

CL-USER> (union '(a b c d) '(z x c v))
(D B A Z X C V)



соединив определение функции in-predicate и функцию union
получаем:

CL-USER> (defun my-union (a b)
           (cond
             ((null a) b)       ;если а пусто, то вернуть b
             ((null b) a)       ;если b пусто, то вернуть a
             ((in-predicate (car a) b)  ;если (car a) принадлежит множеству b, то (cons (car a) (my-union (cdr a) b))
              (my-union (cdr a) b))     ;в потивном случае,(my-union (cdr a) b)
             (t
              (cons (car a)
                    (my-union (cdr a) b)))))


вот определение и вызов моей функции union:

определение функции my-union:

CL-USER> (defun my-union (a b)                                                                                                        
           (cond                                                                                                                      
             ((null a) b)       ;если а пусто, то вернуть b                                                                           
             ((null b) a)       ;если b пусто, то вернуть a                                                                           
             ((in-predicate (car a) b)  ;если (car a) принадлежит множеству b, то (cons (car a) (my-union (cdr a) b))                 
              (my-union (cdr a) b))     ;в потивном случае,(my-union (cdr a) b)                                                       
             (t                                                                                                                       
              (cons (car a)                                                                                                           
                    (my-union (cdr a) b)))))                                                                                          
             
STYLE-WARNING: redefining COMMON-LISP-USER::MY-UNION in DEFUN                                                                         
MY-UNION                                                                                                                              

вызов функции my-union
CL-USER> (my-union '(a b c) '(b c d))
(A B C D) 

итог, все функция сохраняет порядок следования элементов согласно исходным спискам




