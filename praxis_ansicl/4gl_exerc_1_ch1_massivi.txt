4 glava 

___________

EXERC. 1.

___________

Массивы

создать массив - make-array
первый агумент - список размерностей 

> (setf arr (make-array ’(2 3) :initial-element nil))
#<Simple-Array T (2 3) BFC4FE>



создание массива 2Х3
CL-USER> (setf arr (make-array '(2 3) :initial-element nil))
                                                                                                                                      
; in: SETF ARR                                                                                                                        
;     (SETF ARR (MAKE-ARRAY '(2 3) :INITIAL-ELEMENT NIL))                                                                             
; ==>                                                                                                                                 
;   (SETQ ARR (MAKE-ARRAY '(2 3) :INITIAL-ELEMENT NIL))                                                                               
;                                                                                                                                     
; caught WARNING:                                                                                                                     
;   undefined variable: ARR                                                                                                           
;                                                                                                                                     
; compilation unit finished                                                                                                           
;   Undefined variable:                                                                                                               
;     ARR                                                                                                                             
;   caught 1 WARNING condition                                                                                                        
#2A((NIL NIL NIL) (NIL NIL NIL))     




чтобы получить элемент массива - нужно воспользоваться aref

отсчет элементов с нуля

CL-USER> (aref arr 0 0)
NIL

новое значение элемента массива можно установить,
используя setf вместе с aref 

CL-USER> (setf (aref arr 0 0) 'b)
B 
CL-USER> (aref arr 0 0)
B


массивы могут быть заданы буквально
с помощью синтаксиса #na
n - кол-во размерностей массива

CL-USER> #2a((b nil nil) (nil nil nil))
#2A((B NIL NIL) (NIL NIL NIL)) 


глобальная переменная *print-array*
> (setf *print-array* t)
T

ВЕКТОР!!!
создание одномерного массива
> (setf vec (make-array 4 :initial-element nil))
#(NIL NIL NIL NIL)

функция vector
CL-USER> (vector "a" 'b 3)
#("a" B 3) 



Строки и знаки

> (sort "elbow" #’char<)
"below"


получить знак в конкретной позиции с aref
отсчет от нуля

CL-USER> (aref "abc" 2)
#\c                                                                                                                                   
CL-USER> (aref "abc" 1)
#\b                                                                                                                                   
CL-USER> (aref "abc" 0)
#\a  



Замена элементов

CL-USER> (let ((str (copy-seq "Merlin")))                                                                                             
           (setf (char str 3) #\k)                                                                                                    
           str)
"Merkin"  
***
CL-USER> (let ((str (copy-seq "Musiya")))                                                                                             
           (setf (char str 0) #\P)                                                                                                    
           str)
"Pusiya" 
***

сравнение строк
equal
CL-USER> (equal "rigidus" "Rigidus")
NIL
string-equal
CL-USER> (string-equal "rigidus" "Rigidus")
T 



создание строк - format

> (format nil "~A or ~A" "truth" "dare")
"truth or dare"

CL-USER> (format nil "~A or ~A" "truth" "dare")
"truth or dare"                                                                                                                       
CL-USER> (format nil "~A or ~A" "123" "321")
"123 or 321"



соединение строк - concatenate
CL-USER> (concatenate 'string "bla-bla" " " "wei-wei-wei")
"bla-bla wei-wei-wei"



Последовательности

доступ к элементу последовательности
elt

CL-USER> (elt '(a b c) 1)
B
CL-USER> (elt '(a b c) 0)
A                                                                                                                                     
CL-USER> (elt '(a b c) 2)
C 



чтобы узнать car какого элемента содержит a:
напишем
> (position ’a ’((c d) (a b)) :key #’car)
1


CL-USER> (position 'a '((b c d) (e)) :key #'car)
NIL                                                                                                                                   
CL-USER> (position 'e '((b c d) (e)) :key #'car)
1                                                                                                                                     
CL-USER> (position 'b '((b c d) (e)) :key #'car)
0                                                                                                                                     
CL-USER> (position 'c '((b c d) (e)) :key #'car)
NIL                                                                                                                                   
CL-USER> (position 'd '((b c d) (e)) :key #'car)
NIL 


CL-USER> (position 'a '((d c) (a e)) :key #'car)
1                                                                                                                                     
CL-USER> (position 'a '((a c) (b e)) :key #'car)
0 



Структуры













