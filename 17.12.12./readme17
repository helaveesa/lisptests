проверка раздела функции стр. 33-34

; SLIME 2011-08-26
CL-USER> (defun sum-greater (x y z)
           (> (+ x y) z))
SUM-GREATER
CL-USER> (sum-greater 5 6 9)
T
CL-USER> (sum-greater 2 3 9)
NIL

все ок, понятно

_____________
Рекурсия
_____________
проверяем предикат eql

объявляем функцию:
(defun our-member (obj lst)
проверяем пуст или не пуст список
(if (null lst)
nil
проверяем есть ли объект obj в списке lst
car - возвращает головную часть списка lst
пример:
CL-USER> (car '(a b c d))
A


(if (eql (car lst) obj)
lst
выполняемый код, то, что нужно вернуть после вызова функции our-member
cdr - возвращает хвостовую часть списка lst
пример:
CL-USER> (cdr '(a b c d))
(B C D)



(our-member obj (cdr lst)))))

тестируем:

CL-USER> (defun our-member (obj lst)
           (if (null lst)
               nil
               (if (eql (car lst) obj)
                   lst
                   (our-member obj (cdr lst)))))
OUR-MEMBER
CL-USER> (our-member ’b ’(a b c))
; Evaluation aborted on #<UNBOUND-VARIABLE ’B {B841751}>.
CL-USER> (our-member 'b '(a b c))
(B C)
CL-USER> (our-member 'z '(a b c))
NIL
CL-USER> (our-member 'a '(a b c))
(A B C)
CL-USER> (our-member 'c '(a b c))
(C)
CL-USER> (our-member 'x '(a b c))
NIL
CL-USER> (our-member 'ab '(a b c))
NIL
CL-USER> (our-member 'baba '(a b c))
NIL



*****************************************************
______________________________
потестим функцию вывода format
______________________________
(format t "~A plus ~A equals ~A.~%" 2 3 (+ 2 3))

тестируем:

CL-USER> (format t "~A plus ~A equals ~A.~%" 2 3 (+ 2 3))
2 plus 3 equals 5.
NIL
CL-USER> (format t "~A plus ~A equals ~A.~%" 5 5 (+ 5 5))
5 plus 5 equals 10.
NIL
CL-USER> (format t "~A plus ~A equals ~A.~%" 10 5 (- 10 5))
10 plus 5 equals 5.
NIL
CL-USER> (format t "~A plus ~A equals ~A.~%" 5 8 (- 5 8))
5 plus 8 equals -3.
NIL


все ок
__________________________
тестим функцию чтения read
__________________________
обьявляем функцию askem:
(defun askem (string)
(format t "~A" string)
(read))

тестируем:
объявили:
CL-USER> (defun askem (string)
           (format t "~A" string)
           (read))
ответ от slime
ASKEM

вызов функции askem
CL-USER> (askem "Hello, world!")
ответ от slime
Hello, world!

slime выдает приглашение на ввод
вводим
Hello
                                                                                                                                     slime
                                                                                                                                     выдает
                                                                                                                                     нам
                                                                                                                                     то,
                                                                                                                                     что
                                                                                                                                     мы ввели
HELLO

****************************************************************

тестим вариант функции askem с использованием let

объявляем функцию
(defun ask-number ()

функция вывода format
t - вывод будет отправлен в место по умолчанию т.е. toplevel
"..." - строка-шаблон для вывода, и то, что будет напечатано при выводе
(format t "Please enter a number. ")

оператор let вводит новые локальные (действуют в определенной области)
переменные
val - созданная let переменная, содержащая результат вызова read
(let ((val (read)))

условие, if "если"
numberp - предикат, проверяющий является ли его аргумент числом (val)
будет проверять до тех пор, пока аргумент который вводит пользователь
действительно не будет числом
если введенное значение НЕ число, то ask-number вызовет саму себя,
чтобы пользователь повтоил попытку
(if (numberp val)
val
(ask-number))))

тестируем:

объявили

(defun ask-number ()
(format t "Please enter a number. ")
(let ((val (read)))
(if (numberp val)
val
(ask-number))))

объявили
CL-USER> (defun ask-number ()
           (format t "Please enter a number. ")
           (let ((val (read)))
             (if (numberp val)
                 val
                 (ask-number))))
slime вывел
ASK-NUMBER
вызв функции
CL-USER> (ask-number)
автоматически выводится сообщение о вводе числа
Please enter a number.
ввела не число, мама
снова, автоматически выводится сообщение о вводе числа
Please enter a number.
ввела
6 кусков
                                                                                                                                     slime
                                                                                                                                     выдал
6

все верно, 6 - числовое значение

еще раз тестируем:

CL-USER> (ask-number)
Please enter a number.
без пробела ввела
6кусков
все ок, снова выдал сообщение
Please enter a number.
мама
все ок, снова выдал сообщение
Please enter a number.
мама и папа
все ок, снова выдал сообщение, причем сколько я ввела выражений: 3
штуки: 1-мама, 2 - и, 3 - папа
столько раз он мне и вывел сообщение о вводе числа
Please enter a number. Please enter a number. Please enter a
number.
66
ввела 66, все ок выдал 66



66

******************************************************************************

оператор присваивания setf

CL-USER> (setf *glob* 98)

; in: SETF *GLOB*
;     (SETF *GLOB* 98)
; ==>
;   (SETQ *GLOB* 98)
;
; caught WARNING:
;   undefined variable: *GLOB*
;
; compilation unit finished
;   Undefined variable:
;     *GLOB*
;   caught 1 WARNING condition
98
CL-USER> (let ((n 10))
           (setf n 2)
           n)
2

**********************************************

Функции как объекты

оператор function

тестирование:

CL-USER> (function +)
#<FUNCTION +>
CL-USER> (+)
0
CL-USER> (+ 1)
1
CL-USER> (+ 1 2)
3

********************************

упражнения стр. 46

2 упр

Составьте с помощью cons три различных выражения,
создающие список (a b c)

первое выражение:

CL-USER> (cons 'a '(b c))
(A B C)

второе выражение:

CL-USER> (cons '(a) '(b c))
((A) B C)

третье выражение:

CL-USER> (cons '(a b c) nil)
((A B C))
(узнала благодаря
источнику:
http://lisp2d.net/rus/teach/c.html)

CL-USER> (cons '(a b) '(c))
((A B) C)
Источник:
http://habrahabr.ru/post/65791/

прочие выражения:

CL-USER> (cons '(a b) 'c)
((A B) . C)

CL-USER> (cons 'a (cons 'b 'c))
(A B . C)


упр 3

с помощью car и cdr определите функцию, возвращающую четвертый элемент
списка

car - первый элемент списка
cdr - весь список, кроме первого
cons - строит список из всех элементов списка

простой список:

(a b c d)

CL-USER> (car '(a b c d))
A

CL-USER> (cdr '(a b c d))
(B C D)

CL-USER> (cons 'a '(b c d))
(A B C D)

car & cdr

с помощью cdr я вернула четвертый, последний элемент списка

CL-USER> (cdr (cdr (cdr '(a b c cel))))
(CEL)

с помощью cdr и car я вернула четвертый элемент списка, важно, никто
не говорил, что в списке должно быть всего 4 элемента. а я об этом
забыла, не подумала, вот у путалась

CL-USER> (car (cdr (cdr (cdr '(a b c d e f j h k l m)))))
D

4 упр

определите функцию, принимающую два аргумента
и возвращающую наибольший

CL-USER> (defun naibarg (a b)
           (if (> a b)
               (car '(a b)))
           (if (> b a)
               (cdr '(a b))))

STYLE-WARNING: redefining COMMON-LISP-USER::NAIBARG in DEFUN
NAIBARG
CL-USER> (naibarg 2 4)
(B)
CL-USER> (naibarg 5 3)
NIL
CL-USER> (naibarg 4 2)
NIL


но, работает только cdr,
т.к. возвращается (B)

CL-USER> (cdr '(a b))
(B)
CL-USER> (car '(a b))
A



упр 5

что делает функция


объявляется функция mystery (тайна)
фугкция имеет два аргумента

(b) (defun mystery (x y)

условие:

если y - пуст, ноль
вернуть - пустой список nil
       (if (null y)
            nil
предикат eql проверяет два аргумента на идентичность
если (car y) есть в списке x
вернуть ноль
       (if (eql (car y) x)
            0
оператор let
вводит новые локальные переменные:
далее, следует выражение, которое вычисляется по порядку

к локальной переменной z прибавляется единица

       (let ((z (mystery x (cdr y))))
          (and z (+ z 1))))))




упр 6

что может стоять вместо x  в выражениях?

***
(а)

> (car (x (cdr ’(a (b c) d))))
B

тестируем:

CL-USER> (cdr '(a (b c) d))
((B C) D)

далее...

CL-USER> (car '((b c) d))
(B C)

итог:

CL-USER> (car '(b c))
B

Ответ: CAR

проверим:

CL-USER> (car (car (cdr '(a (b c) d))))
B

ок)


***
(b)

> (x 13 (/ 1 0))
13

возможно lambda?


***
(c)

> (x #’list 1 nil)
(1)

apply - ?

проверим...

CL-USER> (apply #' list 1 nil)
(1)

ок, верно


упр 7

функция member проверяет, есть ли в списке
какой-либо объект

если учитывать, что список может быть объектом, то
данная функция может помочь с решении упр 7

либо это будет listp и условный оператор if


упр 8

(а)

хитрожопый вариант:

CL-USER> (format t "~A plus ~A equals ..... ~%" 2 3 (+ 2 3))
2 plus 3 equals .....

