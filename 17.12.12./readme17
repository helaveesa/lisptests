проверка раздела функции стр. 33-34

; SLIME 2011-08-26
CL-USER> (defun sum-greater (x y z)
           (> (+ x y) z))
SUM-GREATER
CL-USER> (sum-greater 5 6 9)
T
CL-USER> (sum-greater 2 3 9)
NIL

все ок, понятно

_____________
Рекурсия
_____________
проверяем предикат eql

объявляем функцию:
(defun our-member (obj lst)
проверяем пуст или не пуст список
(if (null lst)
nil
проверяем есть ли объект obj в списке lst
car - возвращает головную часть списка lst
пример:
CL-USER> (car '(a b c d))
A


(if (eql (car lst) obj)
lst
выполняемый код, то, что нужно вернуть после вызова функции our-member
cdr - возвращает хвостовую часть списка lst
пример:
CL-USER> (cdr '(a b c d))
(B C D)



(our-member obj (cdr lst)))))

тестируем:

CL-USER> (defun our-member (obj lst)
           (if (null lst)
               nil
               (if (eql (car lst) obj)
                   lst
                   (our-member obj (cdr lst)))))
OUR-MEMBER
CL-USER> (our-member ’b ’(a b c))
; Evaluation aborted on #<UNBOUND-VARIABLE ’B {B841751}>.
CL-USER> (our-member 'b '(a b c))
(B C)
CL-USER> (our-member 'z '(a b c))
NIL
CL-USER> (our-member 'a '(a b c))
(A B C)
CL-USER> (our-member 'c '(a b c))
(C)
CL-USER> (our-member 'x '(a b c))
NIL
CL-USER> (our-member 'ab '(a b c))
NIL
CL-USER> (our-member 'baba '(a b c))
NIL



*****************************************************
______________________________
потестим функцию вывода format
______________________________
(format t "~A plus ~A equals ~A.~%" 2 3 (+ 2 3))

тестируем:

CL-USER> (format t "~A plus ~A equals ~A.~%" 2 3 (+ 2 3))
2 plus 3 equals 5.
NIL
CL-USER> (format t "~A plus ~A equals ~A.~%" 5 5 (+ 5 5))
5 plus 5 equals 10.
NIL
CL-USER> (format t "~A plus ~A equals ~A.~%" 10 5 (- 10 5))
10 plus 5 equals 5.
NIL
CL-USER> (format t "~A plus ~A equals ~A.~%" 5 8 (- 5 8))
5 plus 8 equals -3.
NIL


все ок
__________________________
тестим функцию чтения read
__________________________
обьявляем функцию askem:
(defun askem (string)
(format t "~A" string)
(read))

тестируем:
объявили:
CL-USER> (defun askem (string)
           (format t "~A" string)
           (read))
ответ от slime
ASKEM

вызов функции askem
CL-USER> (askem "Hello, world!")
ответ от slime
Hello, world!

slime выдает приглашение на ввод
вводим
Hello
                                                                                                                                     slime
                                                                                                                                     выдает
                                                                                                                                     нам
                                                                                                                                     то,
                                                                                                                                     что
                                                                                                                                     мы ввели
HELLO

****************************************************************

тестим вариант функции askem с использованием let

объявляем функцию
(defun ask-number ()

функция вывода format
t - вывод будет отправлен в место по умолчанию т.е. toplevel
"..." - строка-шаблон для вывода, и то, что будет напечатано при выводе
(format t "Please enter a number. ")

оператор let вводит новые локальные (действуют в определенной области)
переменные
val - созданная let переменная, содержащая результат вызова read
(let ((val (read)))

условие, if "если"
numberp - предикат, проверяющий является ли его аргумент числом (val)
будет проверять до тех пор, пока аргумент который вводит пользователь
действительно не будет числом
если введенное значение НЕ число, то ask-number вызовет саму себя,
чтобы пользователь повтоил попытку
(if (numberp val)
val
(ask-number))))

тестируем:

объявили

(defun ask-number ()
(format t "Please enter a number. ")
(let ((val (read)))
(if (numberp val)
val
(ask-number))))

объявили
CL-USER> (defun ask-number ()
           (format t "Please enter a number. ")
           (let ((val (read)))
             (if (numberp val)
                 val
                 (ask-number))))
slime вывел
ASK-NUMBER
вызв функции
CL-USER> (ask-number)
автоматически выводится сообщение о вводе числа
Please enter a number.
ввела не число, мама
снова, автоматически выводится сообщение о вводе числа
Please enter a number.
ввела
6 кусков
                                                                                                                                     slime
                                                                                                                                     выдал
6

все верно, 6 - числовое значение

еще раз тестируем:

CL-USER> (ask-number)
Please enter a number.
без пробела ввела
6кусков
все ок, снова выдал сообщение
Please enter a number.
мама
все ок, снова выдал сообщение
Please enter a number.
мама и папа
все ок, снова выдал сообщение, причем сколько я ввела выражений: 3
штуки: 1-мама, 2 - и, 3 - папа
столько раз он мне и вывел сообщение о вводе числа
Please enter a number. Please enter a number. Please enter a
number.
66
ввела 66, все ок выдал 66



66

******************************************************************************

